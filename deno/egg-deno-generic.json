{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "version": "PLCN_v1",
        "update_url": null
    },
    "exported_at": "2025-04-19T16:19:28+00:00",
    "name": "Deno Generic",
    "author": "parker@parkervcp.com",
    "uuid": "9bf4389f-7df3-422e-b8ff-0c1e96c7da51",
    "description": "A generic egg to run deno code.",
    "tags": [],
    "features": [],
    "docker_images": {
        "ghcr.io\/parkervcp\/yolks:debian": "ghcr.io\/parkervcp\/yolks:debian"
    },
    "file_denylist": [],
    "startup": ".\/deno run {{JS_FILE}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"change this part\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Deno Bot Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\n\r\napt update\r\napt install -y git curl jq file unzip\r\n\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\nfi\r\n\r\n## pull git js bot repo\r\nif [ \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo -e \"\/mnt\/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git\/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\n## filters to make sure the correct file is downloaded.\r\nGITHUB_PACKAGE=denoland\/deno\r\nEXEC=deno-\r\nOS=linux\r\nNOT=sha256sum\r\n\r\n## get release info and download links\r\n## removes the body of messages as those may break jq\r\nLATEST_JSON=\"$(curl -sSL \"https:\/\/api.github.com\/repos\/denoland\/deno\/releases\/latest\" | jq 'del(.body)')\"\r\nRELEASES=\"$(curl -sSL \"https:\/\/api.github.com\/repos\/${GITHUB_PACKAGE}\/releases\" | jq 'del(.[].body)')\"\r\n\r\nif [ -z \"${VERSION}\" ] || [ \"${VERSION}\" == \"latest\" ]; then\r\n    # gets the download url filtered by arch, executable name, os name, and doesn't show sha256sum files.\r\n    DOWNLOAD_URL=\"$(echo \"${LATEST_JSON}\" | jq -r --arg ARCH \"$(uname -m)\" --arg EXEC \"${EXEC}\" --arg OS ${OS} --arg NOT ${NOT} '.assets | .[].browser_download_url | select(contains($ARCH)) | select(contains($EXEC)) | select(contains($OS)) | select(contains($NOT) | not)')\"\r\nelse\r\n    VERSION_CHECK=\"$(echo ${RELEASES} | jq -r --arg VERSION \"${VERSION}\" '.[] | select(.tag_name==$VERSION) | .tag_name')\"\r\n    if [ \"${VERSION}\" == \"${VERSION_CHECK}\" ]; then\r\n        DOWNLOAD_LINK=\"$(echo ${RELEASES} | jq -r --arg ARCH \"$(uname -m)\" --arg VERSION \"${VERSION}\" --arg EXEC \"${EXEC}\" --arg OS ${OS} --arg NOT ${NOT} '.[] | select(.tag_name==$VERSION) | .assets | .[].browser_download_url | select(contains($EXEC)) | select(contains($ARCH)) | select(contains($OS)) | select(contains($NOT) | not)')\"\r\n    else\r\n        echo -e \"defaulting to latest release\"\r\n        DOWNLOAD_LINK=\"$(echo \"${LATEST_JSON}\" | jq -r --arg ARCH \"$(uname -m)\" --arg EXEC \"${EXEC}\" --arg OS ${OS} --arg NOT ${NOT} '.assets | .[].browser_download_url | select(contains($EXEC)) | select(contains($ARCH)) | select(contains($OS)) | select(contains($NOT) | not)')\"\r\n    fi\r\nfi\r\n\r\nif [ ! -z \"${DOWNLOAD_URL}\" ]; then\r\n    if curl --output \/dev\/null --silent --head --fail ${DOWNLOAD_URL}; then\r\n        echo -e \"link is valid. setting download link to ${DOWNLOAD_URL}\"\r\n        DOWNLOAD_LINK=${DOWNLOAD_URL}\r\n    else\r\n        echo -e \"link is invalid closing out\"\r\n        exit 2\r\n    fi\r\nfi\r\n\r\ncurl -sSL $DOWNLOAD_LINK -o ${DOWNLOAD_LINK##*\/}\r\n\r\nFILETYPE=$(file -F ',' ${DOWNLOAD_LINK##*\/} | cut -d',' -f2 | cut -d' ' -f2)\r\nif [ \"$FILETYPE\" == \"gzip\" ]; then\r\n    tar xzvf ${DOWNLOAD_LINK##*\/}\r\nelif [ \"$FILETYPE\" == \"Zip\" ]; then\r\n    unzip -o ${DOWNLOAD_LINK##*\/}\r\nelif [ \"$FILETYPE\" == \"XZ\" ]; then\r\n    tar xvf ${DOWNLOAD_LINK##*\/}\r\nelse\r\n    echo -e \"unknown filetype. Exiting\"\r\n    exit 2\r\nfi\r\n\r\n## cleaning up downloaded file\r\nrm -f ${DOWNLOAD_LINK##*\/}\r\n\r\necho -e \"install complete\"\r\nexit 0",
            "container": "ghcr.io\/parkervcp\/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "sort": 2,
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 5,
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 3,
            "name": "Git Repo Address",
            "description": "GitHub Repo to clone\r\n\r\nI.E. https:\/\/github.com\/parkervcp\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ]
        },
        {
            "sort": 6,
            "name": "Bot js file",
            "description": "The JavaScript file to run",
            "env_variable": "JS_FILE",
            "default_value": "bot.js",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                "max:20"
            ]
        },
        {
            "sort": 4,
            "name": "User Uploaded Files",
            "description": "Skip all the install stuff if you are letting a user upload files.\r\n\r\n0 = false (default)\r\n1 = true",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "boolean"
            ]
        },
        {
            "sort": 1,
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ]
        }
    ]
}